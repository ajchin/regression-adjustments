.1^(1/10)
1 - .1^.1
The $p$-value is extremely small, so we can safely reject the null hypothesis that there is no home court advantage.
install.packages("devtools")
install.packages("curl")
# install.packages("devtools")
# install.packages("curl")
library(devtools)
library(curl)
# install.packages("devtools")
# install.packages("curl")
library(devtools)
library(curl)
install_github("skardhamar/rga")
# install.packages("devtools")
# install.packages("curl")
# library(devtools)
# library(curl)
# install_github("skardhamar/rga")
library(rga)
rga.open(instance = "ga")
rga.open(instance = "ga")
id = 68272887
ga$getData(id)
data = ga$getData(id)
data = ga$getData(id, start.date=asDate("2016-11-01"))
data = ga$getData(id, start.date=as.Date("2016-11-01"))
data
rga.open(instance = "ga")
id = 68272887
data = ga$getData(id, start.date=as.Date("2016-11-01"))
id = 68272887
data = ga$getData(id, start.date=as.Date("2016-11-01"))
data
library(rga)
# authenticate (copy code into console when prompted)
id = 68272887
rga.open(instance = "ga")
data = ga$getData(id, start.date=as.Date("2016-11-01"))
source('C:/Users/Alex/Google Drive/stanford/kqed/kqed-google-analytics.R', echo=TRUE)
rga.open(instance = "ga"); 3
source('C:/Users/Alex/Google Drive/stanford/kqed/kqed-google-analytics.R', echo=TRUE)
source('C:/Users/Alex/Google Drive/stanford/kqed/kqed-google-analytics.R', echo=TRUE)
source('C:/Users/Alex/Google Drive/stanford/kqed/kqed-google-analytics.R', echo=TRUE)
data = ga$getData(id, metrics="ga:pageviews", start.date=as.Date("2016-11-01"))
data
?ga$getData
source('C:/Users/Alex/Google Drive/stanford/kqed/kqed-google-analytics.R', echo=TRUE)
data = ga$getData(id, metrics="ga:14dayUsers", start.date=as.Date("2016-11-01"))
data
data = ga$getData(id, metrics="ga:pageviews,ga:14dayUsers", start.date=as.Date("2016-11-01"))
data
data = ga$getData(id, metrics="ga:appInstallerId", start.date=as.Date("2016-11-01"))
data = ga$getData(id, dimensions="ga:appInstallerId", start.date=as.Date("2016-11-01"))
data
", start.dat
data = ga$getData(id, metrics="ga:pageviews", start.date=as.Date("2016-11-01"))
x = rnorm(2 * n)
n = 100
x = rnorm(2 * n)
n = 100
x = rnorm(2 * n)
x
x = rnorm(n)
y = 3
library(igraph)
install.packages('igraph')
library(igraph)
?igraph
dist(X)
dist(x
)
dist(x)
n = 10
x = rnorm(n)
dist(x)
as.matrix(dist(x))
as.matrix(dist(x)) < 0.25
as.matrix(dist(x)) < 0.4
1 * (as.matrix(dist(x)) < 0.4)
?igraph_grg_game
diag(adj)
r = 0.4
adj = 1 * (as.matrix(dist(x)) < r)
diag(adj)
diag(adj) = 0
adj
adj = grg_adjacency(x, 0.4)
source('C:/Users/Alex/src/stratification/GCR_test.R', echo=TRUE)
adj
set.seed(2017)
x = rnorm(n)
n = 10
adj = grg_adjacency(x, 0.4)
adj
library(glmnet)
install.packages(glmnet)
install.packages('glmnet')
library(glmnet)
?glmnet
library(sandwich)
install.packages('sandwich')
library(sandwich)
View(NeweyWest)
View(vcovHAC)
?vcovHAC
vcovHAC
sandwich::vcovHAC
meatHAC
View(meatHAC)
values = 1:10
values
new.values = values + rnorm(size=10)
new.values = values + rnorm(n=10)
new.values
jitter(values)
?ar
?cv.glmnet
setwd("~/Dropbox")
rm(list=ls())
install.packages("devtools")
library(devtools)
install.packages("curl")
library(curl)
install_github("skardhamar/rga")
library(ggplot2)
library(grid)
library(gridExtra)
library(reshape2)
id <- "68272887"
Metrics = "ga:users,ga:sessions,ga:pageviews,ga:pageviewsPerSession,ga:bounceRate,ga:avgSessionDuration,ga:percentNewSessions"
Data_161001=ga$getData(id,metrics=Metrics,start.date = as.Date("2016-10-01"))
library(rga)
rga.open(instance = "ga")
id = 68272887
data = ga$getData(id, metrics="ga:pageviews", start.date=as.Date("2016-11-01"))
data = ga$getData(id, metrics="ga:pageviews, ga:latitude, ga:longitude", start.date=as.Date("2016-11-01"))
data = ga$getData(id, metrics="ga:pageviews, ga:city", start.date=as.Date("2016-11-01"))
data = ga$getData(id, metrics="ga:pageviews,ga:city", start.date=as.Date("2016-11-01"))
data = ga$getData(id, metrics="ga:pageviews,ga:city", start.date=as.Date("2016-11-01"))
data = ga$getData(id, metrics="ga:pageviews,ga:userType", start.date=as.Date("2016-11-01"))
data = ga$getData(id, metrics="ga:pageviews", dimensions="ga:latitude",start.date=as.Date("2016-11-01"))
data
head(data)
data = ga$getData(id, metrics="ga:pageviews", dimensions="ga:latitude, ga:longitude",start.date=as.Date("2016-11-01"))
head(data)
View(data)
data = ga$getData(id, metrics="ga:goalCompletionLocation", dimensions="ga:latitude, ga:longitude",start.date=as.Date("2016-11-01"))
data = ga$getData(id, metrics="ga:goalCompletionLocation", dimensions="ga:latitude, ga:longitude",start.date=as.Date("2016-11-01"))
data = ga$getData(id, metrics="ga:goalXXStars", dimensions="ga:latitude, ga:longitude",start.date=as.Date("2016-11-01"))
data = ga$getData(id, metrics="ga:goalXXStatrs", dimensions="ga:latitude, ga:longitude",start.date=as.Date("2016-11-01"))
data = ga$getData(id, metrics="ga:goalXXStarts", dimensions="ga:latitude, ga:longitude",start.date=as.Date("2016-11-01"))
rm(list=ls())
library(data.table)
pref <- fread("Data/KQED_PreferenceByAccount.csv")
acct <- fread("Data/KQED_AccountsWContacts.csv")
lead <- fread("Data/KQED_Leads.csv")
cont <- fread("Data/KQED_ContactsByAccounts.csv")
install.packages("data.table")
mean1 = mean(c(5, 3, 3,5))
mean2 = mean(c(3, 1, 5, 1, 5))
mean
mean1
mean3
mean3 = mean2
mean3
4 / sqrt(24)
2 / sqrt(6)
1 - 1/(2^12)
0.5^12
n=  100
n^2 + n*(n-1)/2
2*n-1
199^2
exp(-0.0001)
1-.6066
f = function(m, h, n) (1 - exp(-m*h/n))^h
f(5, 1, 10)
f(5, 2, 10)
exp(-1/2)
sqrt(1/e)
library(latentnet)
install.packages('latentnet')
library(latentnet)
?ergmm
?network
x = rnorm(n)
x
n = 100
x = rnorm(n)
x
?dist
dists = dist()
dists = dist(x)
dists
plot(dists)
dim(dists)
length(dists)
logistic = function(x) {
1 / 1 + exp(-x)
}
logistic(0)
logistic = function(x) { 1 / (1 + exp(-x))}
logistic(0)
y = rnorm(100)
x1 = rnorm(100)
df = data.frame(y, x1=x1, x2=x1)
df
lm(y ~ x1 + x2, data=df)
fit = lm(y ~ x1 + x2, data=df)
summary(fit)
install.packages('optrdd')
?optrdd
library(optrdd)
?optrdd
optrdd
View(optrdd)
?pnorm
pnorm(1, mean=0.7, sd=0.4)
pnorm(1, mean=-0.7, sd=0.4)
pnorm(1, mean=0.7, sd=0.4)
.5^2 / 25
.5^2 / 25 + .7^2 / 49
sqrt(.02)
pnorm(1, mean=0.7, sd=sqrt(.02))
1 - pnorm(1, mean=0.7, sd=sqrt(.02))
.98^2 * .03
.98^2 * .03 / (.98^2 * .03 + .04^2 * .97)
?trunc
k=2
n=3
#x = rnorm(n,10,1)
#y = rnorm(n,10,10)
x = c(9.5,10.1,10.5)
y = c(4.95,5,5.05)
# Halperin
xy = cbind(x,y)
xbar = mean(x)
ybar = mean(y)
xybar = cbind(xbar,ybar)
S = cov(xy)
Sinv = solve(S)
ones = rep(1,k)
num = ones %*% Sinv %*% t(xybar)
denom = ones %*% Sinv %*% t(t(ones))
mu_halperin = num/denom
# Fields
sx2 = S[1,1]
sy2 = S[2,2]
A = (3/2)*(xbar + ybar)
B = ((sy2 + ybar^2) + (sx2 + xbar^2) + 4*xbar*ybar)/2
C = ((sy2 + ybar^2)*xbar + (sx2 + xbar^2)*ybar)/2
mu = seq(0,15,length.out=100)
fmu = mu^3 -A*mu^2 + B*mu - C
lim = max(abs(fmu))
plot(mu,fmu,type='l',ylim=c(-lim, lim))
lines(mu_halperin*c(1,1),c(-lim,lim),col='red')
lines(c(-100,100),c(0,0),col='black',lty='dashed')
1 Comment
k=2
n=3
#x = rnorm(n,10,1)
#y = rnorm(n,10,10)
x = c(9.5,10.1,10.5)
y = c(4.95,5,5.05)
# Halperin
xy = cbind(x,y)
xbar = mean(x)
ybar = mean(y)
xybar = cbind(xbar,ybar)
S = cov(xy)
Sinv = solve(S)
ones = rep(1,k)
num = ones %*% Sinv %*% t(xybar)
denom = ones %*% Sinv %*% t(t(ones))
mu_halperin = num/denom
# Fields
sx2 = S[1,1]
sy2 = S[2,2]
A = (3/2)*(xbar + ybar)
B = ((sy2 + ybar^2) + (sx2 + xbar^2) + 4*xbar*ybar)/2
C = ((sy2 + ybar^2)*xbar + (sx2 + xbar^2)*ybar)/2
mu = seq(0,15,length.out=100)
fmu = mu^3 -A*mu^2 + B*mu - C
lim = max(abs(fmu))
plot(mu,fmu,type='l',ylim=c(-lim, lim))
lines(mu_halperin*c(1,1),c(-lim,lim),col='red')
lines(c(-100,100),c(0,0),col='black',lty='dashed')
1 Comment
k=2
n=3
#x = rnorm(n,10,1)
#y = rnorm(n,10,10)
x = c(9.5,10.1,10.5)
y = c(4.95,5,5.05)
# Halperin
xy = cbind(x,y)
xbar = mean(x)
ybar = mean(y)
xybar = cbind(xbar,ybar)
S = cov(xy)
Sinv = solve(S)
ones = rep(1,k)
num = ones %*% Sinv %*% t(xybar)
denom = ones %*% Sinv %*% t(t(ones))
mu_halperin = num/denom
# Fields
sx2 = S[1,1]
sy2 = S[2,2]
A = (3/2)*(xbar + ybar)
B = ((sy2 + ybar^2) + (sx2 + xbar^2) + 4*xbar*ybar)/2
C = ((sy2 + ybar^2)*xbar + (sx2 + xbar^2)*ybar)/2
mu = seq(0,15,length.out=100)
fmu = mu^3 -A*mu^2 + B*mu - C
lim = max(abs(fmu))
plot(mu,fmu,type='l',ylim=c(-lim, lim))
lines(mu_halperin*c(1,1),c(-lim,lim),col='red')
lines(c(-100,100),c(0,0),col='black',lty='dashed')
plot(mu,fmu,type='l',ylim=c(-lim, lim))
lines(mu_halperin*c(1,1),c(-lim,lim),col='red')
lines(c(-100,100),c(0,0),col='black',lty='dashed')
mu_halperin
cov(xy)
xbar
xybar
n * Sinv * (xybar - mu_halperin * ones)
n * Sinv * (xybar - mu_halperin * t(ones))
t(ones)
mu_halperin
xybar
n * Sinv %*% (xybar - mu_halperin * t(ones))
Sinv
Sinv %*% xybar
dim(xybar)
dim(Sinv)
n * Sinv %*% (t(xybar) - mu_halperin * ones)
n * Sinv %*% xybarcentered %*% t(xybarcentered) %*% Sinv
xybarcentered = t(xybar) - mu_halperin * ones
n * Sinv %*% xybarcentered %*% t(xybarcentered) %*% Sinv
denominator = 1 + n * (t(xybarcentered) %*% Sinv %*% xybarcentered)
numerator = n * Sinv %*% xybarcentered %*% t(xybarcentered) %*% Sinv
denominator = 1 + n * (t(xybarcentered) %*% Sinv %*% xybarcentered)
n * (Sinv - numerator / denominator)
numerator = n * Sinv %*% xybarcentered %*% t(xybarcentered) %*% Sinv
denominator = 1 + n * (t(xybarcentered) %*% Sinv %*% xybarcentered)
n * (Sinv - numerator / denominator)
numerator
denominator
denominator = (1 + n * (t(xybarcentered) %*% Sinv %*% xybarcentered))[1,1]
n * (Sinv - numerator / denominator)
?cov
S = (n-1)*cov(xy)
Sinv = solve(S)
ones = rep(1,k)
num = ones %*% Sinv %*% t(xybar)
denom = ones %*% Sinv %*% t(t(ones))
mu_halperin = num/denom
mu_halperin
Sinv
S
Sinv
num
denm
denom
xybar
S
plot(x,y)
num = ones %*% Sinv %*% t(xybar)
denom = ones %*% Sinv %*% t(t(ones))
mu_halperin = num/denom
mu_halperin
install.packages('loo')
library(loo)
?loo
covariate_fns_for_response=list(
num_nbh = number_trt_nbrs,
frac_nbh = fraction_trt_nbrs
#frac_nbh2 = fraction_trt_nbrs2
)
library(igraph)
library(foreach)
library(dplyr)
library(tidyr)
library(doParallel)
library(broom)
setwd("~/GitHub/interference-controls-code")
source('functions/data_generators.R')
source('functions/covariate_functions.R')
source('functions/response_functions.R')
source('functions/existing_estimators.R')
source('functions/proposed_estimators.R')
source('functions/variance_estimators.R')
source('functions/precompute_matrices.R')
covariate_fns_for_response=list(
num_nbh = number_trt_nbrs,
frac_nbh = fraction_trt_nbrs
#frac_nbh2 = fraction_trt_nbrs2
)
data = generate_covariate_data(g, covariate_fns_for_response)
load('data/stanford.Rdata')
g = g_fb
g
covariate_fns_for_response=list(
num_nbh = number_trt_nbrs,
frac_nbh = fraction_trt_nbrs
#frac_nbh2 = fraction_trt_nbrs2
)
data = generate_covariate_data(g, covariate_fns_for_response)
nonlinear_response = function(w, x, param) {
n = length(w)
# intercept and (heterogeneous) direct effect #TODO FIX MEAN = 1
y = -5 + 2 * rnorm(n, mean=0, sd=2) * data$w
# number of treated neighbors
num_nbh = x$num_nbh
y = y + num_nbh * 0.03 + 2 / (1 + 0.001 * exp(-0.03 * (num_nbh - 300)))
# fraction of treated neighbors
frac_nbh = x$frac_nbh
y = y + 25 / (3 + exp(-8 * (frac_nbh - 0.4)))
return(y + rnorm(n, sd=param$noise_sd))
}
param = list(noise_sd = 1)
data$y = nonlinear_response(data$w, data$x_obs, param)
data$y
plot(data$y)
plot(data$x_obs$num_nbh, data$y)
plot(data$x_obs$frac_nbh, data$y)
frac_nbh = x$frac_nbh
y = y + 25 / (3 + exp(-8 * (frac_nbh - 0.4)))
frac_nbh = data$x_obs$frac_nbh
y = y + 25 / (3 + exp(-8 * (frac_nbh - 0.4)))
y = -5 + 2 * rnorm(n, mean=0, sd=2) * data$w
n
n
n = length(data$w)
y = -5 + 2 * rnorm(n, mean=0, sd=2) * data$w
y = y + 25 / (3 + exp(-8 * (frac_nbh - 0.4)))
plot(frac_nbh, y)
fns_for_response=list(
num_nbh = number_trt_nbrs,
frac_nbh = fraction_trt_nbrs
#frac_nbh2 = fraction_trt_nbrs2
)
load('data/stanford.Rdata')
fns=list(
num_nbh = number_trt_nbrs,
frac_nbh = fraction_trt_nbrs
#frac_nbh2 = fraction_trt_nbrs2
)
data = generate_covariate_data(g, fns)
data$y = nonlinear_response(data$w, data$x_obs, param)
frac = data$x_obs$frac_nbh
num = data$x_obs$num_nbh
y = data$y
plot(frac, y)
plot(num, y)
df = data.frame(frac, num, y) %>%
gather(k, x, frac, num) %>%
ggplot(aes(x, y)) + geom_point() + facet_grid(k ~ .)
library(ggplot2)
df = data.frame(frac, num, y) %>%
gather(k, x, frac, num) %>%
ggplot(aes(x, y)) + geom_point() + facet_grid(k ~ .)
data.frame(frac, num, y) %>%
gather(k, x, frac, num) %>%
ggplot(aes(x, y)) + geom_point() + facet_grid(. ~ k)
data.frame(frac, num, y) %>%
gather(k, x, frac, num) %>%
ggplot(aes(x, y)) + geom_point() + facet_grid(. ~ k, scales='free')
data.frame(frac, num, y) %>%
gather(k, x, frac, num) %>%
ggplot(aes(x, y)) + geom_point(alpha=0.05) + facet_grid(. ~ k, scales='free') +
theme_bw()
data.frame(frac, num, y) %>%
gather(k, x, frac, num) %>%
ggplot(aes(x, y)) + geom_point(alpha=0.05) + facet_grid(. ~ k, scales='free') +
theme_bw() + scale_x_log10()
data.frame(frac, num, y) %>%
gather(k, x, frac, num) %>%
ggplot(aes(x, y)) + geom_point(shape=4,alpha=0.05) + facet_grid(. ~ k, scales='free') +
theme_bw() + scale_x_log10()
p_num = data.frame(y, num) %>%
ggplot(aes(num, y)) + geom_point(alpha = 0.05) + scale_x_log10() +
theme_bw()
library(gridExtra)
p_frac = data.frame(y, num) %>%
ggplot(aes(num, y)) + geom_point(alpha = 0.05) +
theme_bw()
grid.arrange(p_frac, p_num, nrow=1)
p_frac = data.frame(y, frac) %>%
ggplot(aes(frac, y)) + geom_point(alpha = 0.05) +
theme_bw()
grid.arrange(p_frac, p_num, nrow=1)
p_num = data.frame(y, num) %>%
ggplot(aes(num, y)) + geom_point(alpha = 0.05) + scale_x_log10() +
theme_bw() + xlab('number of treated neighbors')
p_frac = data.frame(y, frac) %>%
ggplot(aes(frac, y)) + geom_point(alpha = 0.05) +
theme_bw() + xlab('fraction of treated neighbors')
p = grid.arrange(p_frac, p_num, nrow=1)
p
p + ggtitle('x')
ggsave('figures/nonlinear_response.png', p)
ggsave('figures/nonlinear_response.png', p, width=10, height=5)
p_num = data.frame(y, num) %>%
ggplot(aes(num, y)) + geom_point(alpha = 0.03, shape=4) + scale_x_log10() +
theme_bw() + xlab('number of treated neighbors')
p_frac = data.frame(y, frac) %>%
ggplot(aes(frac, y)) + geom_point(alpha = 0.03, shape=4) +
theme_bw() + xlab('fraction of treated neighbors')
p = grid.arrange(p_frac, p_num, nrow=1)
p = grid.arrange(p_frac, p_num, nrow=1)
ggsave('figures/nonlinear_response.png', p, width=10, height=5)
